var data = {lines:[
{"lineNum":"    1","line":"//! Timer module"},
{"lineNum":"    2","line":"//!"},
{"lineNum":"    3","line":"//! Provides the Timer struct and methods"},
{"lineNum":"    4","line":"use std::thread::sleep;"},
{"lineNum":"    5","line":"use std::time::Duration;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"/// Timer struct, with the `max_count` variable"},
{"lineNum":"    8","line":"/// to be set with the number or seconds or minutes."},
{"lineNum":"    9","line":"///"},
{"lineNum":"   10","line":"/// Example:"},
{"lineNum":"   11","line":"/// ```"},
{"lineNum":"   12","line":"/// # use timer::timer::Timer;"},
{"lineNum":"   13","line":"/// let tmr = Timer::new(12);"},
{"lineNum":"   14","line":"/// assert_eq!(12, tmr.max_count);"},
{"lineNum":"   15","line":"/// assert!(!tmr.minutes);"},
{"lineNum":"   16","line":"/// ```"},
{"lineNum":"   17","line":"#[derive(Debug)]","class":"lineNoCov","hits":"0",},
{"lineNum":"   18","line":"pub struct Timer {"},
{"lineNum":"   19","line":"    pub max_count: u64,","class":"lineNoCov","hits":"0",},
{"lineNum":"   20","line":"    pub minutes: bool,","class":"lineNoCov","hits":"0",},
{"lineNum":"   21","line":"}"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"/// Method implementation for the Timer struct."},
{"lineNum":"   24","line":"impl Timer {"},
{"lineNum":"   25","line":"    /// `new` method implementation, with `max_count` mandatory."},
{"lineNum":"   26","line":"    pub fn new(max_count: u64) -> Self {","class":"lineCov","hits":"1","order":"29",},
{"lineNum":"   27","line":"        Timer {","class":"lineCov","hits":"1","order":"41",},
{"lineNum":"   28","line":"            max_count: max_count,"},
{"lineNum":"   29","line":"            minutes: false,"},
{"lineNum":"   30","line":"        }"},
{"lineNum":"   31","line":"    }","class":"lineCov","hits":"1","order":"7",},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    /// Initialises a new Timer with the command"},
{"lineNum":"   34","line":"    /// line arguments passed in the argument `args`."},
{"lineNum":"   35","line":"    pub fn init(args: Vec<String>) -> crate::timer::Timer {","class":"lineCov","hits":"1","order":"50",},
{"lineNum":"   36","line":"        let mut tmr = crate::timer::Timer::new(0);","class":"lineCov","hits":"1","order":"47",},
{"lineNum":"   37","line":"        for (index, arg) in args.iter().enumerate() {","class":"lineCov","hits":"1","order":"6",},
{"lineNum":"   38","line":"            if index > 0 {","class":"lineCov","hits":"1","order":"5",},
{"lineNum":"   39","line":"                if arg == \"-m\" {","class":"lineCov","hits":"1","order":"52",},
{"lineNum":"   40","line":"                    eprintln!(\"Time will be set in minutes!\");","class":"lineCov","hits":"1","order":"39",},
{"lineNum":"   41","line":"                    tmr.minutes = true;","class":"lineCov","hits":"1","order":"35",},
{"lineNum":"   42","line":"                } else if tmr.max_count == 0 {","class":"lineCov","hits":"1","order":"32",},
{"lineNum":"   43","line":"                    match arg.parse::<u64>() {","class":"lineCov","hits":"1","order":"27",},
{"lineNum":"   44","line":"                        Ok(n) => tmr.max_count = n,","class":"lineCov","hits":"1","order":"4",},
{"lineNum":"   45","line":"                        Err(e) => eprintln!(\"Error while parsing argument {}: {}\", arg, e),","class":"lineNoCov","hits":"0",},
{"lineNum":"   46","line":"                    };"},
{"lineNum":"   47","line":"                }"},
{"lineNum":"   48","line":"            }"},
{"lineNum":"   49","line":"        }"},
{"lineNum":"   50","line":"        tmr"},
{"lineNum":"   51","line":"    }","class":"lineCov","hits":"1","order":"13",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    /// Starts the timer with the given time"},
{"lineNum":"   54","line":"    pub fn start(&self) {","class":"lineCov","hits":"1","order":"10",},
{"lineNum":"   55","line":"        let time = if self.minutes {","class":"lineCov","hits":"1","order":"8",},
{"lineNum":"   56","line":"            self.max_count * 60","class":"lineNoCov","hits":"0",},
{"lineNum":"   57","line":"        } else {"},
{"lineNum":"   58","line":"            self.max_count","class":"lineCov","hits":"1","order":"3",},
{"lineNum":"   59","line":"        };"},
{"lineNum":"   60","line":"        sleep(Duration::from_secs(time));","class":"lineCov","hits":"1","order":"2",},
{"lineNum":"   61","line":"    }","class":"lineCov","hits":"1","order":"1",},
{"lineNum":"   62","line":"}"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"#[cfg(test)]"},
{"lineNum":"   65","line":"mod tests {"},
{"lineNum":"   66","line":"    use super::*;"},
{"lineNum":"   67","line":"    use std::env::args;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    #[test]"},
{"lineNum":"   70","line":"    fn test_timer_new() {","class":"lineCov","hits":"1","order":"38",},
{"lineNum":"   71","line":"        let tmr = Timer::new(12);","class":"lineCov","hits":"1","order":"34",},
{"lineNum":"   72","line":"        assert_eq!(12, tmr.max_count);","class":"lineCov","hits":"1","order":"31",},
{"lineNum":"   73","line":"        assert!(!tmr.minutes);","class":"lineCov","hits":"1","order":"26",},
{"lineNum":"   74","line":"    }","class":"lineCov","hits":"1","order":"37",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    #[test]"},
{"lineNum":"   77","line":"    fn test_new_with_minutes() {","class":"lineCov","hits":"1","order":"24",},
{"lineNum":"   78","line":"        let mut tmr = Timer::new(12);","class":"lineCov","hits":"1","order":"21",},
{"lineNum":"   79","line":"        tmr.minutes = true;","class":"lineCov","hits":"1","order":"20",},
{"lineNum":"   80","line":"        assert_eq!(12, tmr.max_count);","class":"lineCov","hits":"1","order":"19",},
{"lineNum":"   81","line":"        assert!(tmr.minutes);","class":"lineCov","hits":"1","order":"18",},
{"lineNum":"   82","line":"    }","class":"lineCov","hits":"1","order":"23",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    #[test]"},
{"lineNum":"   85","line":"    fn test_config() {","class":"lineCov","hits":"1","order":"30",},
{"lineNum":"   86","line":"        for arg in args() {","class":"lineCov","hits":"1","order":"42",},
{"lineNum":"   87","line":"            println!(\"\\n{}\", arg);","class":"lineCov","hits":"1","order":"45",},
{"lineNum":"   88","line":"        }","class":"lineCov","hits":"1","order":"44",},
{"lineNum":"   89","line":"    }","class":"lineCov","hits":"1","order":"17",},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    #[test]"},
{"lineNum":"   92","line":"    fn test_start() {","class":"lineCov","hits":"1","order":"46",},
{"lineNum":"   93","line":"        let tmr = Timer::new(1);","class":"lineCov","hits":"1","order":"49",},
{"lineNum":"   94","line":"        tmr.start();","class":"lineCov","hits":"1","order":"51",},
{"lineNum":"   95","line":"    }","class":"lineCov","hits":"1","order":"48",},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    #[test]"},
{"lineNum":"   98","line":"    fn test_init_no_values() {","class":"lineCov","hits":"1","order":"53",},
{"lineNum":"   99","line":"        let args: Vec<String> = vec![];","class":"lineCov","hits":"1","order":"40",},
{"lineNum":"  100","line":"        let tmr = Timer::init(args);","class":"lineCov","hits":"1","order":"36",},
{"lineNum":"  101","line":"        assert_eq!(0, tmr.max_count);","class":"lineCov","hits":"1","order":"33",},
{"lineNum":"  102","line":"    }","class":"lineCov","hits":"1","order":"28",},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    #[test]"},
{"lineNum":"  105","line":"    fn test_init() {","class":"lineCov","hits":"1","order":"54",},
{"lineNum":"  106","line":"        let args: Vec<String> = vec![","class":"lineCov","hits":"1","order":"25",},
{"lineNum":"  107","line":"            String::from(\"\"),","class":"lineCov","hits":"1","order":"22",},
{"lineNum":"  108","line":"            \"-m\".to_string(),","class":"lineCov","hits":"1","order":"16",},
{"lineNum":"  109","line":"            \"12\".to_string(),","class":"lineCov","hits":"1","order":"15",},
{"lineNum":"  110","line":"            \"13\".to_string(),","class":"lineCov","hits":"1","order":"14",},
{"lineNum":"  111","line":"        ];"},
{"lineNum":"  112","line":"        let tmr = Timer::init(args);","class":"lineCov","hits":"1","order":"12",},
{"lineNum":"  113","line":"        assert_eq!(12, tmr.max_count);","class":"lineCov","hits":"1","order":"11",},
{"lineNum":"  114","line":"        assert!(tmr.minutes);","class":"lineCov","hits":"1","order":"9",},
{"lineNum":"  115","line":"    }","class":"lineCov","hits":"1","order":"43",},
{"lineNum":"  116","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "", "date" : "2021-08-28 10:38:37", "instrumented" : 59, "covered" : 54,};
var merged_data = [];
